/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedSpacecraftFlightList,
    PaginatedSpacecraftFlightListFromJSON,
    PaginatedSpacecraftFlightListToJSON,
    PaginatedSpacecraftList,
    PaginatedSpacecraftListFromJSON,
    PaginatedSpacecraftListToJSON,
    SpacecraftDetailed,
    SpacecraftDetailedFromJSON,
    SpacecraftDetailedToJSON,
    SpacecraftFlightDetailed,
    SpacecraftFlightDetailedFromJSON,
    SpacecraftFlightDetailedToJSON,
} from '../models';

export interface SpacecraftFlightListRequest {
    limit?: number;
    offset?: number;
    spacecraft?: number;
}

export interface SpacecraftFlightRetrieveRequest {
    id: number;
}

export interface SpacecraftListRequest {
    limit?: number;
    name?: string;
    offset?: number;
    ordering?: string;
    search?: string;
    spacecraftConfig?: number;
    status?: number;
}

export interface SpacecraftRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class SpacecraftApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows a flight of a specific Spacecraft instances to be viewed.  GET: Return a list of all the existing Spacecraft flights.  FILTERS: Parameters - \'spacecraft\' Example - /api/2.2.0/launcher/?spacecraft=37
     */
    async spacecraftFlightListRaw(requestParameters: SpacecraftFlightListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedSpacecraftFlightList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.spacecraft !== undefined) {
            queryParameters['spacecraft'] = requestParameters.spacecraft;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacecraft/flight/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSpacecraftFlightListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows a flight of a specific Spacecraft instances to be viewed.  GET: Return a list of all the existing Spacecraft flights.  FILTERS: Parameters - \'spacecraft\' Example - /api/2.2.0/launcher/?spacecraft=37
     */
    async spacecraftFlightList(requestParameters: SpacecraftFlightListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedSpacecraftFlightList> {
        const response = await this.spacecraftFlightListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows a flight of a specific Spacecraft instances to be viewed.  GET: Return a list of all the existing Spacecraft flights.  FILTERS: Parameters - \'spacecraft\' Example - /api/2.2.0/launcher/?spacecraft=37
     */
    async spacecraftFlightRetrieveRaw(requestParameters: SpacecraftFlightRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpacecraftFlightDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spacecraftFlightRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacecraft/flight/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpacecraftFlightDetailedFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows a flight of a specific Spacecraft instances to be viewed.  GET: Return a list of all the existing Spacecraft flights.  FILTERS: Parameters - \'spacecraft\' Example - /api/2.2.0/launcher/?spacecraft=37
     */
    async spacecraftFlightRetrieve(requestParameters: SpacecraftFlightRetrieveRequest, initOverrides?: RequestInit): Promise<SpacecraftFlightDetailed> {
        const response = await this.spacecraftFlightRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Spacecrafts to be viewed. A Spacecraft is a physically manufactured instance of a Spacecraft Configuration  GET: Return a list of all the existing spacecraft.  FILTERS: Parameters - \'name\', \'status\', \'spacecraft_config\' Example - /2.2.0/spacecraft/?status=Active  SEARCH EXAMPLE: Example - /2.2.0/spacecraft/?search=Dragon  ORDERING: Fields - \'id\' Example - /2.2.0/spacecraft/?order=id
     */
    async spacecraftListRaw(requestParameters: SpacecraftListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedSpacecraftList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.spacecraftConfig !== undefined) {
            queryParameters['spacecraft_config'] = requestParameters.spacecraftConfig;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacecraft/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSpacecraftListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Spacecrafts to be viewed. A Spacecraft is a physically manufactured instance of a Spacecraft Configuration  GET: Return a list of all the existing spacecraft.  FILTERS: Parameters - \'name\', \'status\', \'spacecraft_config\' Example - /2.2.0/spacecraft/?status=Active  SEARCH EXAMPLE: Example - /2.2.0/spacecraft/?search=Dragon  ORDERING: Fields - \'id\' Example - /2.2.0/spacecraft/?order=id
     */
    async spacecraftList(requestParameters: SpacecraftListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedSpacecraftList> {
        const response = await this.spacecraftListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Spacecrafts to be viewed. A Spacecraft is a physically manufactured instance of a Spacecraft Configuration  GET: Return a list of all the existing spacecraft.  FILTERS: Parameters - \'name\', \'status\', \'spacecraft_config\' Example - /2.2.0/spacecraft/?status=Active  SEARCH EXAMPLE: Example - /2.2.0/spacecraft/?search=Dragon  ORDERING: Fields - \'id\' Example - /2.2.0/spacecraft/?order=id
     */
    async spacecraftRetrieveRaw(requestParameters: SpacecraftRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpacecraftDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spacecraftRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacecraft/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpacecraftDetailedFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Spacecrafts to be viewed. A Spacecraft is a physically manufactured instance of a Spacecraft Configuration  GET: Return a list of all the existing spacecraft.  FILTERS: Parameters - \'name\', \'status\', \'spacecraft_config\' Example - /2.2.0/spacecraft/?status=Active  SEARCH EXAMPLE: Example - /2.2.0/spacecraft/?search=Dragon  ORDERING: Fields - \'id\' Example - /2.2.0/spacecraft/?order=id
     */
    async spacecraftRetrieve(requestParameters: SpacecraftRetrieveRequest, initOverrides?: RequestInit): Promise<SpacecraftDetailed> {
        const response = await this.spacecraftRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
