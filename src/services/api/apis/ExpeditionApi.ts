/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExpeditionDetail,
    ExpeditionDetailFromJSON,
    ExpeditionDetailToJSON,
    PaginatedExpeditionList,
    PaginatedExpeditionListFromJSON,
    PaginatedExpeditionListToJSON,
} from '../models';

export interface ExpeditionListRequest {
    crewAstronaut?: number;
    crewAstronautAgency?: number;
    endGt?: Date;
    endGte?: Date;
    endLt?: Date;
    endLte?: Date;
    limit?: number;
    name?: string;
    offset?: number;
    ordering?: string;
    search?: string;
    spaceStation?: number;
    startGt?: Date;
    startGte?: Date;
    startLt?: Date;
    startLte?: Date;
}

export interface ExpeditionRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class ExpeditionApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Expeditions to be viewed.  GET: Return a list of all the existing expeditions.  MODE: Normal and Detailed /2.2.0/expedition/?mode=detailed  FILTERS: Fields - \'name\', \'crew__astronaut\', \'crew__astronaut__agency\', \'space_station\'  Get all Expeditions with the Space Station ID of 1. Example - /2.2.0/expedition/?space_station=1&mode=detailed  Search for all Expeditions with the Astronaut named John Example - /2.2.0/expedition/?search=John  ORDERING: Fields - \'id\', \'start\', \'end\' Order reverse via Start date. Example - /2.2.0/astronaut/?order=-start
     */
    async expeditionListRaw(requestParameters: ExpeditionListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedExpeditionList>> {
        const queryParameters: any = {};

        if (requestParameters.crewAstronaut !== undefined) {
            queryParameters['crew__astronaut'] = requestParameters.crewAstronaut;
        }

        if (requestParameters.crewAstronautAgency !== undefined) {
            queryParameters['crew__astronaut__agency'] = requestParameters.crewAstronautAgency;
        }

        if (requestParameters.endGt !== undefined) {
            queryParameters['end__gt'] = (requestParameters.endGt as any).toISOString();
        }

        if (requestParameters.endGte !== undefined) {
            queryParameters['end__gte'] = (requestParameters.endGte as any).toISOString();
        }

        if (requestParameters.endLt !== undefined) {
            queryParameters['end__lt'] = (requestParameters.endLt as any).toISOString();
        }

        if (requestParameters.endLte !== undefined) {
            queryParameters['end__lte'] = (requestParameters.endLte as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.spaceStation !== undefined) {
            queryParameters['space_station'] = requestParameters.spaceStation;
        }

        if (requestParameters.startGt !== undefined) {
            queryParameters['start__gt'] = (requestParameters.startGt as any).toISOString();
        }

        if (requestParameters.startGte !== undefined) {
            queryParameters['start__gte'] = (requestParameters.startGte as any).toISOString();
        }

        if (requestParameters.startLt !== undefined) {
            queryParameters['start__lt'] = (requestParameters.startLt as any).toISOString();
        }

        if (requestParameters.startLte !== undefined) {
            queryParameters['start__lte'] = (requestParameters.startLte as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/expedition/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedExpeditionListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Expeditions to be viewed.  GET: Return a list of all the existing expeditions.  MODE: Normal and Detailed /2.2.0/expedition/?mode=detailed  FILTERS: Fields - \'name\', \'crew__astronaut\', \'crew__astronaut__agency\', \'space_station\'  Get all Expeditions with the Space Station ID of 1. Example - /2.2.0/expedition/?space_station=1&mode=detailed  Search for all Expeditions with the Astronaut named John Example - /2.2.0/expedition/?search=John  ORDERING: Fields - \'id\', \'start\', \'end\' Order reverse via Start date. Example - /2.2.0/astronaut/?order=-start
     */
    async expeditionList(requestParameters: ExpeditionListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedExpeditionList> {
        const response = await this.expeditionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Expeditions to be viewed.  GET: Return a list of all the existing expeditions.  MODE: Normal and Detailed /2.2.0/expedition/?mode=detailed  FILTERS: Fields - \'name\', \'crew__astronaut\', \'crew__astronaut__agency\', \'space_station\'  Get all Expeditions with the Space Station ID of 1. Example - /2.2.0/expedition/?space_station=1&mode=detailed  Search for all Expeditions with the Astronaut named John Example - /2.2.0/expedition/?search=John  ORDERING: Fields - \'id\', \'start\', \'end\' Order reverse via Start date. Example - /2.2.0/astronaut/?order=-start
     */
    async expeditionRetrieveRaw(requestParameters: ExpeditionRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ExpeditionDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expeditionRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/expedition/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpeditionDetailFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Expeditions to be viewed.  GET: Return a list of all the existing expeditions.  MODE: Normal and Detailed /2.2.0/expedition/?mode=detailed  FILTERS: Fields - \'name\', \'crew__astronaut\', \'crew__astronaut__agency\', \'space_station\'  Get all Expeditions with the Space Station ID of 1. Example - /2.2.0/expedition/?space_station=1&mode=detailed  Search for all Expeditions with the Astronaut named John Example - /2.2.0/expedition/?search=John  ORDERING: Fields - \'id\', \'start\', \'end\' Order reverse via Start date. Example - /2.2.0/astronaut/?order=-start
     */
    async expeditionRetrieve(requestParameters: ExpeditionRetrieveRequest, initOverrides?: RequestInit): Promise<ExpeditionDetail> {
        const response = await this.expeditionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
