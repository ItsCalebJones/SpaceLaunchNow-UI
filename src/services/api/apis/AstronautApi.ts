/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AstronautDetailed,
    AstronautDetailedFromJSON,
    AstronautDetailedToJSON,
    PaginatedAstronautNormalList,
    PaginatedAstronautNormalListFromJSON,
    PaginatedAstronautNormalListToJSON,
} from '../models';

export interface AstronautListRequest {
    agencyAbbrev?: string;
    agencyName?: string;
    dateOfBirth?: Date;
    dateOfBirthGt?: Date;
    dateOfBirthGte?: Date;
    dateOfBirthLt?: Date;
    dateOfBirthLte?: Date;
    dateOfDeath?: Date;
    dateOfDeathGt?: Date;
    dateOfDeathGte?: Date;
    dateOfDeathLt?: Date;
    dateOfDeathLte?: Date;
    limit?: number;
    name?: string;
    nationality?: string;
    offset?: number;
    ordering?: string;
    search?: string;
    status?: number;
}

export interface AstronautRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class AstronautApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Astronaut to be viewed.  GET: Return a list of all the existing astronauts.  MODE: Normal, List, LaunchList and Detailed /2.2.0/astronaut/?mode=detailed  FILTERS: Parameters - \'name\', \'status\', \'nationality\', \'agency__name\', \'agency__abbrev\', \'date_of_birth\',  \'date_of_death\', \'status_ids\' Example - /2.2.0/astronaut/?nationality=American  SEARCH EXAMPLE: /2.2.0/astronaut/?search=armstrong Searches through name, nationality and agency name  ORDERING: Fields - \'name\', \'status\', \'date_of_birth\' Example - /2.2.0/astronaut/?order=name
     */
    async astronautListRaw(requestParameters: AstronautListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedAstronautNormalList>> {
        const queryParameters: any = {};

        if (requestParameters.agencyAbbrev !== undefined) {
            queryParameters['agency__abbrev'] = requestParameters.agencyAbbrev;
        }

        if (requestParameters.agencyName !== undefined) {
            queryParameters['agency__name'] = requestParameters.agencyName;
        }

        if (requestParameters.dateOfBirth !== undefined) {
            queryParameters['date_of_birth'] = (requestParameters.dateOfBirth as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfBirthGt !== undefined) {
            queryParameters['date_of_birth__gt'] = (requestParameters.dateOfBirthGt as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfBirthGte !== undefined) {
            queryParameters['date_of_birth__gte'] = (requestParameters.dateOfBirthGte as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfBirthLt !== undefined) {
            queryParameters['date_of_birth__lt'] = (requestParameters.dateOfBirthLt as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfBirthLte !== undefined) {
            queryParameters['date_of_birth__lte'] = (requestParameters.dateOfBirthLte as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfDeath !== undefined) {
            queryParameters['date_of_death'] = (requestParameters.dateOfDeath as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfDeathGt !== undefined) {
            queryParameters['date_of_death__gt'] = (requestParameters.dateOfDeathGt as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfDeathGte !== undefined) {
            queryParameters['date_of_death__gte'] = (requestParameters.dateOfDeathGte as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfDeathLt !== undefined) {
            queryParameters['date_of_death__lt'] = (requestParameters.dateOfDeathLt as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateOfDeathLte !== undefined) {
            queryParameters['date_of_death__lte'] = (requestParameters.dateOfDeathLte as any).toISOString().substr(0,10);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.nationality !== undefined) {
            queryParameters['nationality'] = requestParameters.nationality;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/astronaut/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAstronautNormalListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Astronaut to be viewed.  GET: Return a list of all the existing astronauts.  MODE: Normal, List, LaunchList and Detailed /2.2.0/astronaut/?mode=detailed  FILTERS: Parameters - \'name\', \'status\', \'nationality\', \'agency__name\', \'agency__abbrev\', \'date_of_birth\',  \'date_of_death\', \'status_ids\' Example - /2.2.0/astronaut/?nationality=American  SEARCH EXAMPLE: /2.2.0/astronaut/?search=armstrong Searches through name, nationality and agency name  ORDERING: Fields - \'name\', \'status\', \'date_of_birth\' Example - /2.2.0/astronaut/?order=name
     */
    async astronautList(requestParameters: AstronautListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedAstronautNormalList> {
        const response = await this.astronautListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Astronaut to be viewed.  GET: Return a list of all the existing astronauts.  MODE: Normal, List, LaunchList and Detailed /2.2.0/astronaut/?mode=detailed  FILTERS: Parameters - \'name\', \'status\', \'nationality\', \'agency__name\', \'agency__abbrev\', \'date_of_birth\',  \'date_of_death\', \'status_ids\' Example - /2.2.0/astronaut/?nationality=American  SEARCH EXAMPLE: /2.2.0/astronaut/?search=armstrong Searches through name, nationality and agency name  ORDERING: Fields - \'name\', \'status\', \'date_of_birth\' Example - /2.2.0/astronaut/?order=name
     */
    async astronautRetrieveRaw(requestParameters: AstronautRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AstronautDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling astronautRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/astronaut/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AstronautDetailedFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Astronaut to be viewed.  GET: Return a list of all the existing astronauts.  MODE: Normal, List, LaunchList and Detailed /2.2.0/astronaut/?mode=detailed  FILTERS: Parameters - \'name\', \'status\', \'nationality\', \'agency__name\', \'agency__abbrev\', \'date_of_birth\',  \'date_of_death\', \'status_ids\' Example - /2.2.0/astronaut/?nationality=American  SEARCH EXAMPLE: /2.2.0/astronaut/?search=armstrong Searches through name, nationality and agency name  ORDERING: Fields - \'name\', \'status\', \'date_of_birth\' Example - /2.2.0/astronaut/?order=name
     */
    async astronautRetrieve(requestParameters: AstronautRetrieveRequest, initOverrides?: RequestInit): Promise<AstronautDetailed> {
        const response = await this.astronautRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
