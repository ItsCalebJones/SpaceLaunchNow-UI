/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocationDetail,
    LocationDetailFromJSON,
    LocationDetailToJSON,
    PaginatedLocationList,
    PaginatedLocationListFromJSON,
    PaginatedLocationListToJSON,
} from '../models';

export interface LocationListRequest {
    countryCode?: string;
    id?: number;
    limit?: number;
    name?: string;
    offset?: number;
    padLocationId?: number | null;
    search?: string;
}

export interface LocationRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Location instances to be viewed.  GET: Return a list of all the existing location instances.  FILTERS: Parameters - \'name\', \'country_code\', \'id\' Example - /2.2.0/location/?country_code=USA
     */
    async locationListRaw(requestParameters: LocationListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedLocationList>> {
        const queryParameters: any = {};

        if (requestParameters.countryCode !== undefined) {
            queryParameters['country_code'] = requestParameters.countryCode;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.padLocationId !== undefined) {
            queryParameters['pad__location_id'] = requestParameters.padLocationId;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/location/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLocationListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Location instances to be viewed.  GET: Return a list of all the existing location instances.  FILTERS: Parameters - \'name\', \'country_code\', \'id\' Example - /2.2.0/location/?country_code=USA
     */
    async locationList(requestParameters: LocationListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedLocationList> {
        const response = await this.locationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Location instances to be viewed.  GET: Return a list of all the existing location instances.  FILTERS: Parameters - \'name\', \'country_code\', \'id\' Example - /2.2.0/location/?country_code=USA
     */
    async locationRetrieveRaw(requestParameters: LocationRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/location/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationDetailFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Location instances to be viewed.  GET: Return a list of all the existing location instances.  FILTERS: Parameters - \'name\', \'country_code\', \'id\' Example - /2.2.0/location/?country_code=USA
     */
    async locationRetrieve(requestParameters: LocationRetrieveRequest, initOverrides?: RequestInit): Promise<LocationDetail> {
        const response = await this.locationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
