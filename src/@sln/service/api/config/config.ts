/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  PaginatedAgencyTypeList,
  ConfigAgencytypeListParams,
  AgencyType,
  PaginatedAstronautRoleList,
  ConfigAstronautroleListParams,
  AstronautRole,
  PaginatedAstronautStatusList,
  ConfigAstronautstatusListParams,
  AstronautStatus,
  PaginatedAstronautTypeList,
  ConfigAstronauttypeListParams,
  AstronautType,
  PaginatedDockingLocationList,
  ConfigDockinglocationListParams,
  DockingLocation,
  PaginatedEventTypeList,
  ConfigEventtypeListParams,
  EventType,
  PaginatedFirstStageTypeList,
  ConfigFirststagetypeListParams,
  FirstStageType,
  PaginatedLandingLocationList,
  ConfigLandinglocationListParams,
  LandingLocation,
  PaginatedLauncherConfigList,
  ConfigLauncherListParams,
  LauncherConfigDetail,
  PaginatedLaunchStatusList,
  ConfigLaunchstatusListParams,
  LaunchStatus,
  PaginatedMissionTypeList,
  ConfigMissiontypeListParams,
  MissionType,
  PaginatedNoticeTypeList,
  ConfigNoticetypeListParams,
  NoticeType,
  PaginatedOrbitList,
  ConfigOrbitListParams,
  Orbit,
  PaginatedRoadClosureStatusList,
  ConfigRoadclosurestatusListParams,
  RoadClosureStatus,
  PaginatedSpacecraftConfigurationList,
  ConfigSpacecraftListParams,
  SpacecraftConfigurationDetail,
  PaginatedSpacecraftStatusList,
  ConfigSpacecraftstatusListParams,
  SpacecraftStatus,
  PaginatedSpaceStationStatusList,
  ConfigSpacestationstatusListParams,
  SpaceStationStatus,
} from "../../model";

export const configAgencytypeList = (
  params?: ConfigAgencytypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedAgencyTypeList>> => {
  return axios.get(`/2.2.0/config/agencytype/`, {
    params,
    ...options,
  });
};

export const getConfigAgencytypeListQueryKey = (
  params?: ConfigAgencytypeListParams
) => [`/2.2.0/config/agencytype/`, ...(params ? [params] : [])];

export type ConfigAgencytypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAgencytypeList>>
>;
export type ConfigAgencytypeListQueryError = AxiosError<unknown>;

export const useConfigAgencytypeList = <
  TData = Awaited<ReturnType<typeof configAgencytypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigAgencytypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAgencytypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAgencytypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAgencytypeList>>
  > = ({ signal }) => configAgencytypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAgencytypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configAgencytypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AgencyType>> => {
  return axios.get(`/2.2.0/config/agencytype/${id}/`, options);
};

export const getConfigAgencytypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/agencytype/${id}/`,
];

export type ConfigAgencytypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAgencytypeRetrieve>>
>;
export type ConfigAgencytypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigAgencytypeRetrieve = <
  TData = Awaited<ReturnType<typeof configAgencytypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAgencytypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAgencytypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAgencytypeRetrieve>>
  > = ({ signal }) => configAgencytypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAgencytypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configAstronautroleList = (
  params?: ConfigAstronautroleListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedAstronautRoleList>> => {
  return axios.get(`/2.2.0/config/astronautrole/`, {
    params,
    ...options,
  });
};

export const getConfigAstronautroleListQueryKey = (
  params?: ConfigAstronautroleListParams
) => [`/2.2.0/config/astronautrole/`, ...(params ? [params] : [])];

export type ConfigAstronautroleListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronautroleList>>
>;
export type ConfigAstronautroleListQueryError = AxiosError<unknown>;

export const useConfigAstronautroleList = <
  TData = Awaited<ReturnType<typeof configAstronautroleList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigAstronautroleListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronautroleList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronautroleListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronautroleList>>
  > = ({ signal }) =>
    configAstronautroleList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronautroleList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configAstronautroleRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AstronautRole>> => {
  return axios.get(`/2.2.0/config/astronautrole/${id}/`, options);
};

export const getConfigAstronautroleRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/astronautrole/${id}/`,
];

export type ConfigAstronautroleRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronautroleRetrieve>>
>;
export type ConfigAstronautroleRetrieveQueryError = AxiosError<unknown>;

export const useConfigAstronautroleRetrieve = <
  TData = Awaited<ReturnType<typeof configAstronautroleRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronautroleRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronautroleRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronautroleRetrieve>>
  > = ({ signal }) =>
    configAstronautroleRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronautroleRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configAstronautstatusList = (
  params?: ConfigAstronautstatusListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedAstronautStatusList>> => {
  return axios.get(`/2.2.0/config/astronautstatus/`, {
    params,
    ...options,
  });
};

export const getConfigAstronautstatusListQueryKey = (
  params?: ConfigAstronautstatusListParams
) => [`/2.2.0/config/astronautstatus/`, ...(params ? [params] : [])];

export type ConfigAstronautstatusListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronautstatusList>>
>;
export type ConfigAstronautstatusListQueryError = AxiosError<unknown>;

export const useConfigAstronautstatusList = <
  TData = Awaited<ReturnType<typeof configAstronautstatusList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigAstronautstatusListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronautstatusList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronautstatusListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronautstatusList>>
  > = ({ signal }) =>
    configAstronautstatusList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronautstatusList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configAstronautstatusRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AstronautStatus>> => {
  return axios.get(`/2.2.0/config/astronautstatus/${id}/`, options);
};

export const getConfigAstronautstatusRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/astronautstatus/${id}/`,
];

export type ConfigAstronautstatusRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronautstatusRetrieve>>
>;
export type ConfigAstronautstatusRetrieveQueryError = AxiosError<unknown>;

export const useConfigAstronautstatusRetrieve = <
  TData = Awaited<ReturnType<typeof configAstronautstatusRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronautstatusRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronautstatusRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronautstatusRetrieve>>
  > = ({ signal }) =>
    configAstronautstatusRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronautstatusRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configAstronauttypeList = (
  params?: ConfigAstronauttypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedAstronautTypeList>> => {
  return axios.get(`/2.2.0/config/astronauttype/`, {
    params,
    ...options,
  });
};

export const getConfigAstronauttypeListQueryKey = (
  params?: ConfigAstronauttypeListParams
) => [`/2.2.0/config/astronauttype/`, ...(params ? [params] : [])];

export type ConfigAstronauttypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronauttypeList>>
>;
export type ConfigAstronauttypeListQueryError = AxiosError<unknown>;

export const useConfigAstronauttypeList = <
  TData = Awaited<ReturnType<typeof configAstronauttypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigAstronauttypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronauttypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronauttypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronauttypeList>>
  > = ({ signal }) =>
    configAstronauttypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronauttypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configAstronauttypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AstronautType>> => {
  return axios.get(`/2.2.0/config/astronauttype/${id}/`, options);
};

export const getConfigAstronauttypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/astronauttype/${id}/`,
];

export type ConfigAstronauttypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configAstronauttypeRetrieve>>
>;
export type ConfigAstronauttypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigAstronauttypeRetrieve = <
  TData = Awaited<ReturnType<typeof configAstronauttypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configAstronauttypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigAstronauttypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configAstronauttypeRetrieve>>
  > = ({ signal }) =>
    configAstronauttypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configAstronauttypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configDockinglocationList = (
  params?: ConfigDockinglocationListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedDockingLocationList>> => {
  return axios.get(`/2.2.0/config/dockinglocation/`, {
    params,
    ...options,
  });
};

export const getConfigDockinglocationListQueryKey = (
  params?: ConfigDockinglocationListParams
) => [`/2.2.0/config/dockinglocation/`, ...(params ? [params] : [])];

export type ConfigDockinglocationListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configDockinglocationList>>
>;
export type ConfigDockinglocationListQueryError = AxiosError<unknown>;

export const useConfigDockinglocationList = <
  TData = Awaited<ReturnType<typeof configDockinglocationList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigDockinglocationListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configDockinglocationList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigDockinglocationListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configDockinglocationList>>
  > = ({ signal }) =>
    configDockinglocationList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configDockinglocationList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configDockinglocationRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DockingLocation>> => {
  return axios.get(`/2.2.0/config/dockinglocation/${id}/`, options);
};

export const getConfigDockinglocationRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/dockinglocation/${id}/`,
];

export type ConfigDockinglocationRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configDockinglocationRetrieve>>
>;
export type ConfigDockinglocationRetrieveQueryError = AxiosError<unknown>;

export const useConfigDockinglocationRetrieve = <
  TData = Awaited<ReturnType<typeof configDockinglocationRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configDockinglocationRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigDockinglocationRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configDockinglocationRetrieve>>
  > = ({ signal }) =>
    configDockinglocationRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configDockinglocationRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configEventtypeList = (
  params?: ConfigEventtypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedEventTypeList>> => {
  return axios.get(`/2.2.0/config/eventtype/`, {
    params,
    ...options,
  });
};

export const getConfigEventtypeListQueryKey = (
  params?: ConfigEventtypeListParams
) => [`/2.2.0/config/eventtype/`, ...(params ? [params] : [])];

export type ConfigEventtypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configEventtypeList>>
>;
export type ConfigEventtypeListQueryError = AxiosError<unknown>;

export const useConfigEventtypeList = <
  TData = Awaited<ReturnType<typeof configEventtypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigEventtypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configEventtypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigEventtypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configEventtypeList>>
  > = ({ signal }) => configEventtypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configEventtypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configEventtypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventType>> => {
  return axios.get(`/2.2.0/config/eventtype/${id}/`, options);
};

export const getConfigEventtypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/eventtype/${id}/`,
];

export type ConfigEventtypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configEventtypeRetrieve>>
>;
export type ConfigEventtypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigEventtypeRetrieve = <
  TData = Awaited<ReturnType<typeof configEventtypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configEventtypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigEventtypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configEventtypeRetrieve>>
  > = ({ signal }) => configEventtypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configEventtypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configFirststagetypeList = (
  params?: ConfigFirststagetypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedFirstStageTypeList>> => {
  return axios.get(`/2.2.0/config/firststagetype/`, {
    params,
    ...options,
  });
};

export const getConfigFirststagetypeListQueryKey = (
  params?: ConfigFirststagetypeListParams
) => [`/2.2.0/config/firststagetype/`, ...(params ? [params] : [])];

export type ConfigFirststagetypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configFirststagetypeList>>
>;
export type ConfigFirststagetypeListQueryError = AxiosError<unknown>;

export const useConfigFirststagetypeList = <
  TData = Awaited<ReturnType<typeof configFirststagetypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigFirststagetypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configFirststagetypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigFirststagetypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configFirststagetypeList>>
  > = ({ signal }) =>
    configFirststagetypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configFirststagetypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configFirststagetypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FirstStageType>> => {
  return axios.get(`/2.2.0/config/firststagetype/${id}/`, options);
};

export const getConfigFirststagetypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/firststagetype/${id}/`,
];

export type ConfigFirststagetypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configFirststagetypeRetrieve>>
>;
export type ConfigFirststagetypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigFirststagetypeRetrieve = <
  TData = Awaited<ReturnType<typeof configFirststagetypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configFirststagetypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigFirststagetypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configFirststagetypeRetrieve>>
  > = ({ signal }) =>
    configFirststagetypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configFirststagetypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configLandinglocationList = (
  params?: ConfigLandinglocationListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedLandingLocationList>> => {
  return axios.get(`/2.2.0/config/landinglocation/`, {
    params,
    ...options,
  });
};

export const getConfigLandinglocationListQueryKey = (
  params?: ConfigLandinglocationListParams
) => [`/2.2.0/config/landinglocation/`, ...(params ? [params] : [])];

export type ConfigLandinglocationListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLandinglocationList>>
>;
export type ConfigLandinglocationListQueryError = AxiosError<unknown>;

export const useConfigLandinglocationList = <
  TData = Awaited<ReturnType<typeof configLandinglocationList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigLandinglocationListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLandinglocationList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLandinglocationListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configLandinglocationList>>
  > = ({ signal }) =>
    configLandinglocationList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLandinglocationList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configLandinglocationRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LandingLocation>> => {
  return axios.get(`/2.2.0/config/landinglocation/${id}/`, options);
};

export const getConfigLandinglocationRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/landinglocation/${id}/`,
];

export type ConfigLandinglocationRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLandinglocationRetrieve>>
>;
export type ConfigLandinglocationRetrieveQueryError = AxiosError<unknown>;

export const useConfigLandinglocationRetrieve = <
  TData = Awaited<ReturnType<typeof configLandinglocationRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLandinglocationRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLandinglocationRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configLandinglocationRetrieve>>
  > = ({ signal }) =>
    configLandinglocationRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLandinglocationRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Launcher Configurations to be viewed.

GET:
Return a list of all the existing launcher configurations.

MODE:
Normal and Detailed
/2.2.0/config/launcher/?mode=detailed

FILTERS:
Fields - 'family', 'agency', 'name', 'manufacturer__name', 'full_name'

Get all Launchers with the Agency with name NASA.
Example - /2.2.0/config/launcher/?manufacturer__name=NASA
 */
export const configLauncherList = (
  params?: ConfigLauncherListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedLauncherConfigList>> => {
  return axios.get(`/2.2.0/config/launcher/`, {
    params,
    ...options,
  });
};

export const getConfigLauncherListQueryKey = (
  params?: ConfigLauncherListParams
) => [`/2.2.0/config/launcher/`, ...(params ? [params] : [])];

export type ConfigLauncherListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLauncherList>>
>;
export type ConfigLauncherListQueryError = AxiosError<unknown>;

export const useConfigLauncherList = <
  TData = Awaited<ReturnType<typeof configLauncherList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigLauncherListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLauncherList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLauncherListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof configLauncherList>>> =
    ({ signal }) => configLauncherList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLauncherList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Launcher Configurations to be viewed.

GET:
Return a list of all the existing launcher configurations.

MODE:
Normal and Detailed
/2.2.0/config/launcher/?mode=detailed

FILTERS:
Fields - 'family', 'agency', 'name', 'manufacturer__name', 'full_name'

Get all Launchers with the Agency with name NASA.
Example - /2.2.0/config/launcher/?manufacturer__name=NASA
 */
export const configLauncherRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LauncherConfigDetail>> => {
  return axios.get(`/2.2.0/config/launcher/${id}/`, options);
};

export const getConfigLauncherRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/launcher/${id}/`,
];

export type ConfigLauncherRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLauncherRetrieve>>
>;
export type ConfigLauncherRetrieveQueryError = AxiosError<unknown>;

export const useConfigLauncherRetrieve = <
  TData = Awaited<ReturnType<typeof configLauncherRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLauncherRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLauncherRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configLauncherRetrieve>>
  > = ({ signal }) => configLauncherRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLauncherRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configLaunchstatusList = (
  params?: ConfigLaunchstatusListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedLaunchStatusList>> => {
  return axios.get(`/2.2.0/config/launchstatus/`, {
    params,
    ...options,
  });
};

export const getConfigLaunchstatusListQueryKey = (
  params?: ConfigLaunchstatusListParams
) => [`/2.2.0/config/launchstatus/`, ...(params ? [params] : [])];

export type ConfigLaunchstatusListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLaunchstatusList>>
>;
export type ConfigLaunchstatusListQueryError = AxiosError<unknown>;

export const useConfigLaunchstatusList = <
  TData = Awaited<ReturnType<typeof configLaunchstatusList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigLaunchstatusListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLaunchstatusList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLaunchstatusListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configLaunchstatusList>>
  > = ({ signal }) =>
    configLaunchstatusList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLaunchstatusList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configLaunchstatusRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LaunchStatus>> => {
  return axios.get(`/2.2.0/config/launchstatus/${id}/`, options);
};

export const getConfigLaunchstatusRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/launchstatus/${id}/`,
];

export type ConfigLaunchstatusRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configLaunchstatusRetrieve>>
>;
export type ConfigLaunchstatusRetrieveQueryError = AxiosError<unknown>;

export const useConfigLaunchstatusRetrieve = <
  TData = Awaited<ReturnType<typeof configLaunchstatusRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configLaunchstatusRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigLaunchstatusRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configLaunchstatusRetrieve>>
  > = ({ signal }) =>
    configLaunchstatusRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configLaunchstatusRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configMissiontypeList = (
  params?: ConfigMissiontypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedMissionTypeList>> => {
  return axios.get(`/2.2.0/config/missiontype/`, {
    params,
    ...options,
  });
};

export const getConfigMissiontypeListQueryKey = (
  params?: ConfigMissiontypeListParams
) => [`/2.2.0/config/missiontype/`, ...(params ? [params] : [])];

export type ConfigMissiontypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configMissiontypeList>>
>;
export type ConfigMissiontypeListQueryError = AxiosError<unknown>;

export const useConfigMissiontypeList = <
  TData = Awaited<ReturnType<typeof configMissiontypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigMissiontypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configMissiontypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigMissiontypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configMissiontypeList>>
  > = ({ signal }) =>
    configMissiontypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configMissiontypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configMissiontypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MissionType>> => {
  return axios.get(`/2.2.0/config/missiontype/${id}/`, options);
};

export const getConfigMissiontypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/missiontype/${id}/`,
];

export type ConfigMissiontypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configMissiontypeRetrieve>>
>;
export type ConfigMissiontypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigMissiontypeRetrieve = <
  TData = Awaited<ReturnType<typeof configMissiontypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configMissiontypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigMissiontypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configMissiontypeRetrieve>>
  > = ({ signal }) =>
    configMissiontypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configMissiontypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configNoticetypeList = (
  params?: ConfigNoticetypeListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedNoticeTypeList>> => {
  return axios.get(`/2.2.0/config/noticetype/`, {
    params,
    ...options,
  });
};

export const getConfigNoticetypeListQueryKey = (
  params?: ConfigNoticetypeListParams
) => [`/2.2.0/config/noticetype/`, ...(params ? [params] : [])];

export type ConfigNoticetypeListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configNoticetypeList>>
>;
export type ConfigNoticetypeListQueryError = AxiosError<unknown>;

export const useConfigNoticetypeList = <
  TData = Awaited<ReturnType<typeof configNoticetypeList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigNoticetypeListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configNoticetypeList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigNoticetypeListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configNoticetypeList>>
  > = ({ signal }) => configNoticetypeList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configNoticetypeList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configNoticetypeRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NoticeType>> => {
  return axios.get(`/2.2.0/config/noticetype/${id}/`, options);
};

export const getConfigNoticetypeRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/noticetype/${id}/`,
];

export type ConfigNoticetypeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configNoticetypeRetrieve>>
>;
export type ConfigNoticetypeRetrieveQueryError = AxiosError<unknown>;

export const useConfigNoticetypeRetrieve = <
  TData = Awaited<ReturnType<typeof configNoticetypeRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configNoticetypeRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigNoticetypeRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configNoticetypeRetrieve>>
  > = ({ signal }) => configNoticetypeRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configNoticetypeRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configOrbitList = (
  params?: ConfigOrbitListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedOrbitList>> => {
  return axios.get(`/2.2.0/config/orbit/`, {
    params,
    ...options,
  });
};

export const getConfigOrbitListQueryKey = (params?: ConfigOrbitListParams) => [
  `/2.2.0/config/orbit/`,
  ...(params ? [params] : []),
];

export type ConfigOrbitListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configOrbitList>>
>;
export type ConfigOrbitListQueryError = AxiosError<unknown>;

export const useConfigOrbitList = <
  TData = Awaited<ReturnType<typeof configOrbitList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigOrbitListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configOrbitList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getConfigOrbitListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof configOrbitList>>> = ({
    signal,
  }) => configOrbitList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configOrbitList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configOrbitRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Orbit>> => {
  return axios.get(`/2.2.0/config/orbit/${id}/`, options);
};

export const getConfigOrbitRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/orbit/${id}/`,
];

export type ConfigOrbitRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configOrbitRetrieve>>
>;
export type ConfigOrbitRetrieveQueryError = AxiosError<unknown>;

export const useConfigOrbitRetrieve = <
  TData = Awaited<ReturnType<typeof configOrbitRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configOrbitRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getConfigOrbitRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configOrbitRetrieve>>
  > = ({ signal }) => configOrbitRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configOrbitRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configRoadclosurestatusList = (
  params?: ConfigRoadclosurestatusListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedRoadClosureStatusList>> => {
  return axios.get(`/2.2.0/config/roadclosurestatus/`, {
    params,
    ...options,
  });
};

export const getConfigRoadclosurestatusListQueryKey = (
  params?: ConfigRoadclosurestatusListParams
) => [`/2.2.0/config/roadclosurestatus/`, ...(params ? [params] : [])];

export type ConfigRoadclosurestatusListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configRoadclosurestatusList>>
>;
export type ConfigRoadclosurestatusListQueryError = AxiosError<unknown>;

export const useConfigRoadclosurestatusList = <
  TData = Awaited<ReturnType<typeof configRoadclosurestatusList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigRoadclosurestatusListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configRoadclosurestatusList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigRoadclosurestatusListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configRoadclosurestatusList>>
  > = ({ signal }) =>
    configRoadclosurestatusList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configRoadclosurestatusList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configRoadclosurestatusRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RoadClosureStatus>> => {
  return axios.get(`/2.2.0/config/roadclosurestatus/${id}/`, options);
};

export const getConfigRoadclosurestatusRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/roadclosurestatus/${id}/`,
];

export type ConfigRoadclosurestatusRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configRoadclosurestatusRetrieve>>
>;
export type ConfigRoadclosurestatusRetrieveQueryError = AxiosError<unknown>;

export const useConfigRoadclosurestatusRetrieve = <
  TData = Awaited<ReturnType<typeof configRoadclosurestatusRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configRoadclosurestatusRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigRoadclosurestatusRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configRoadclosurestatusRetrieve>>
  > = ({ signal }) =>
    configRoadclosurestatusRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configRoadclosurestatusRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Spacecraft Configs to be viewed.

GET:
Return a list of all the existing spacecraft.

FILTERS:
Parameters - 'name', 'manufacturer', 'in_use', 'human_rated'
Example - /2.2.0/config/spacecraft/?status=Active

SEARCH EXAMPLE:
Example - /2.2.0/config/spacecraft/?search=Dragon

ORDERING:
Fields - 'name'
Example - /2.2.0/config/spacecraft/?order=name
 */
export const configSpacecraftList = (
  params?: ConfigSpacecraftListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedSpacecraftConfigurationList>> => {
  return axios.get(`/2.2.0/config/spacecraft/`, {
    params,
    ...options,
  });
};

export const getConfigSpacecraftListQueryKey = (
  params?: ConfigSpacecraftListParams
) => [`/2.2.0/config/spacecraft/`, ...(params ? [params] : [])];

export type ConfigSpacecraftListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacecraftList>>
>;
export type ConfigSpacecraftListQueryError = AxiosError<unknown>;

export const useConfigSpacecraftList = <
  TData = Awaited<ReturnType<typeof configSpacecraftList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigSpacecraftListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacecraftList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacecraftListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacecraftList>>
  > = ({ signal }) => configSpacecraftList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacecraftList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Spacecraft Configs to be viewed.

GET:
Return a list of all the existing spacecraft.

FILTERS:
Parameters - 'name', 'manufacturer', 'in_use', 'human_rated'
Example - /2.2.0/config/spacecraft/?status=Active

SEARCH EXAMPLE:
Example - /2.2.0/config/spacecraft/?search=Dragon

ORDERING:
Fields - 'name'
Example - /2.2.0/config/spacecraft/?order=name
 */
export const configSpacecraftRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SpacecraftConfigurationDetail>> => {
  return axios.get(`/2.2.0/config/spacecraft/${id}/`, options);
};

export const getConfigSpacecraftRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/spacecraft/${id}/`,
];

export type ConfigSpacecraftRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacecraftRetrieve>>
>;
export type ConfigSpacecraftRetrieveQueryError = AxiosError<unknown>;

export const useConfigSpacecraftRetrieve = <
  TData = Awaited<ReturnType<typeof configSpacecraftRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacecraftRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacecraftRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacecraftRetrieve>>
  > = ({ signal }) => configSpacecraftRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacecraftRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configSpacecraftstatusList = (
  params?: ConfigSpacecraftstatusListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedSpacecraftStatusList>> => {
  return axios.get(`/2.2.0/config/spacecraftstatus/`, {
    params,
    ...options,
  });
};

export const getConfigSpacecraftstatusListQueryKey = (
  params?: ConfigSpacecraftstatusListParams
) => [`/2.2.0/config/spacecraftstatus/`, ...(params ? [params] : [])];

export type ConfigSpacecraftstatusListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacecraftstatusList>>
>;
export type ConfigSpacecraftstatusListQueryError = AxiosError<unknown>;

export const useConfigSpacecraftstatusList = <
  TData = Awaited<ReturnType<typeof configSpacecraftstatusList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigSpacecraftstatusListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacecraftstatusList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacecraftstatusListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacecraftstatusList>>
  > = ({ signal }) =>
    configSpacecraftstatusList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacecraftstatusList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configSpacecraftstatusRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SpacecraftStatus>> => {
  return axios.get(`/2.2.0/config/spacecraftstatus/${id}/`, options);
};

export const getConfigSpacecraftstatusRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/spacecraftstatus/${id}/`,
];

export type ConfigSpacecraftstatusRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacecraftstatusRetrieve>>
>;
export type ConfigSpacecraftstatusRetrieveQueryError = AxiosError<unknown>;

export const useConfigSpacecraftstatusRetrieve = <
  TData = Awaited<ReturnType<typeof configSpacecraftstatusRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacecraftstatusRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacecraftstatusRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacecraftstatusRetrieve>>
  > = ({ signal }) =>
    configSpacecraftstatusRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacecraftstatusRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};

export const configSpacestationstatusList = (
  params?: ConfigSpacestationstatusListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedSpaceStationStatusList>> => {
  return axios.get(`/2.2.0/config/spacestationstatus/`, {
    params,
    ...options,
  });
};

export const getConfigSpacestationstatusListQueryKey = (
  params?: ConfigSpacestationstatusListParams
) => [`/2.2.0/config/spacestationstatus/`, ...(params ? [params] : [])];

export type ConfigSpacestationstatusListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacestationstatusList>>
>;
export type ConfigSpacestationstatusListQueryError = AxiosError<unknown>;

export const useConfigSpacestationstatusList = <
  TData = Awaited<ReturnType<typeof configSpacestationstatusList>>,
  TError = AxiosError<unknown>
>(
  params?: ConfigSpacestationstatusListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacestationstatusList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacestationstatusListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacestationstatusList>>
  > = ({ signal }) =>
    configSpacestationstatusList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacestationstatusList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const configSpacestationstatusRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SpaceStationStatus>> => {
  return axios.get(`/2.2.0/config/spacestationstatus/${id}/`, options);
};

export const getConfigSpacestationstatusRetrieveQueryKey = (id: number) => [
  `/2.2.0/config/spacestationstatus/${id}/`,
];

export type ConfigSpacestationstatusRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof configSpacestationstatusRetrieve>>
>;
export type ConfigSpacestationstatusRetrieveQueryError = AxiosError<unknown>;

export const useConfigSpacestationstatusRetrieve = <
  TData = Awaited<ReturnType<typeof configSpacestationstatusRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configSpacestationstatusRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigSpacestationstatusRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof configSpacestationstatusRetrieve>>
  > = ({ signal }) =>
    configSpacestationstatusRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof configSpacestationstatusRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
