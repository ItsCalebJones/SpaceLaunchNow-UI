/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PaginatedAstronautNormalList,
  AstronautListParams,
  AstronautDetailed
} from '../../model'


/**
 * API endpoint that allows Astronaut to be viewed.

GET:
Return a list of all the existing astronauts.

MODE:
Normal, List, LaunchList and Detailed
/2.2.0/astronaut/?mode=detailed

FILTERS:
Parameters - 'name', 'status', 'nationality', 'agency__name', 'agency__abbrev', 'date_of_birth',
 'date_of_death', 'status_ids'
Example - /2.2.0/astronaut/?nationality=American

SEARCH EXAMPLE:
/2.2.0/astronaut/?search=armstrong
Searches through name, nationality and agency name

ORDERING:
Fields - 'name', 'status', 'date_of_birth'
Example - /2.2.0/astronaut/?order=name
 */
export const astronautList = (
    params?: AstronautListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedAstronautNormalList>> => {
    return axios.get(
      `/2.2.0/astronaut/`,{
        params,
    ...options}
    );
  }


export const getAstronautListQueryKey = (params?: AstronautListParams,) => [`/2.2.0/astronaut/`, ...(params ? [params]: [])];

    
export type AstronautListQueryResult = NonNullable<Awaited<ReturnType<typeof astronautList>>>
export type AstronautListQueryError = AxiosError<unknown>

export const useAstronautList = <TData = Awaited<ReturnType<typeof astronautList>>, TError = AxiosError<unknown>>(
 params?: AstronautListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof astronautList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAstronautListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof astronautList>>> = ({ signal }) => astronautList(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof astronautList>>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that allows Astronaut to be viewed.

GET:
Return a list of all the existing astronauts.

MODE:
Normal, List, LaunchList and Detailed
/2.2.0/astronaut/?mode=detailed

FILTERS:
Parameters - 'name', 'status', 'nationality', 'agency__name', 'agency__abbrev', 'date_of_birth',
 'date_of_death', 'status_ids'
Example - /2.2.0/astronaut/?nationality=American

SEARCH EXAMPLE:
/2.2.0/astronaut/?search=armstrong
Searches through name, nationality and agency name

ORDERING:
Fields - 'name', 'status', 'date_of_birth'
Example - /2.2.0/astronaut/?order=name
 */
export const astronautRetrieve = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AstronautDetailed>> => {
    return axios.get(
      `/2.2.0/astronaut/${id}/`,options
    );
  }


export const getAstronautRetrieveQueryKey = (id: number,) => [`/2.2.0/astronaut/${id}/`];

    
export type AstronautRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof astronautRetrieve>>>
export type AstronautRetrieveQueryError = AxiosError<unknown>

export const useAstronautRetrieve = <TData = Awaited<ReturnType<typeof astronautRetrieve>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof astronautRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAstronautRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof astronautRetrieve>>> = ({ signal }) => astronautRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof astronautRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

