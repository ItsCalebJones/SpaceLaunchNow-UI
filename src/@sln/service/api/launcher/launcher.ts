/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  PaginatedLauncherList,
  LauncherListParams,
  LauncherDetail,
} from "../../model";

/**
 * API endpoint that allows Launcher instances to be viewed.

GET:
Return a list of all the existing launcher instances.

FILTERS:
Parameters - 'id', 'serial_number', 'flight_proven', 'launcher_config', 'launcher_config__manufacturer'
Example - /2.2.0/launcher/?serial_number=B1046

SEARCH EXAMPLE:
/2.2.0/launcher/?search=expended
Searches through serial number or status

ORDERING:
Fields - 'id', 'flight_proven',
Example - /2.2.0/launcher/?order=flight_proven
 */
export const launcherList = (
  params?: LauncherListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedLauncherList>> => {
  return axios.get(`/2.2.0/launcher/`, {
    params,
    ...options,
  });
};

export const getLauncherListQueryKey = (params?: LauncherListParams) => [
  `/2.2.0/launcher/`,
  ...(params ? [params] : []),
];

export type LauncherListQueryResult = NonNullable<
  Awaited<ReturnType<typeof launcherList>>
>;
export type LauncherListQueryError = AxiosError<unknown>;

export const useLauncherList = <
  TData = Awaited<ReturnType<typeof launcherList>>,
  TError = AxiosError<unknown>
>(
  params?: LauncherListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof launcherList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLauncherListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launcherList>>> = ({
    signal,
  }) => launcherList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof launcherList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Launcher instances to be viewed.

GET:
Return a list of all the existing launcher instances.

FILTERS:
Parameters - 'id', 'serial_number', 'flight_proven', 'launcher_config', 'launcher_config__manufacturer'
Example - /2.2.0/launcher/?serial_number=B1046

SEARCH EXAMPLE:
/2.2.0/launcher/?search=expended
Searches through serial number or status

ORDERING:
Fields - 'id', 'flight_proven',
Example - /2.2.0/launcher/?order=flight_proven
 */
export const launcherRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LauncherDetail>> => {
  return axios.get(`/2.2.0/launcher/${id}/`, options);
};

export const getLauncherRetrieveQueryKey = (id: number) => [
  `/2.2.0/launcher/${id}/`,
];

export type LauncherRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof launcherRetrieve>>
>;
export type LauncherRetrieveQueryError = AxiosError<unknown>;

export const useLauncherRetrieve = <
  TData = Awaited<ReturnType<typeof launcherRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof launcherRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLauncherRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launcherRetrieve>>> =
    ({ signal }) => launcherRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof launcherRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
