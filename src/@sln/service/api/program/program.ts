/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PaginatedProgramList,
  ProgramListParams,
  Program
} from '../../model'


/**
 * API endpoint that returns Program objects.
 */
export const programList = (
    params?: ProgramListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedProgramList>> => {
    return axios.get(
      `/2.2.0/program/`,{
        params,
    ...options}
    );
  }


export const getProgramListQueryKey = (params?: ProgramListParams,) => [`/2.2.0/program/`, ...(params ? [params]: [])];

    
export type ProgramListQueryResult = NonNullable<Awaited<ReturnType<typeof programList>>>
export type ProgramListQueryError = AxiosError<unknown>

export const useProgramList = <TData = Awaited<ReturnType<typeof programList>>, TError = AxiosError<unknown>>(
 params?: ProgramListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof programList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProgramListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof programList>>> = ({ signal }) => programList(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof programList>>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns Program objects.
 */
export const programRetrieve = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Program>> => {
    return axios.get(
      `/2.2.0/program/${id}/`,options
    );
  }


export const getProgramRetrieveQueryKey = (id: number,) => [`/2.2.0/program/${id}/`];

    
export type ProgramRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof programRetrieve>>>
export type ProgramRetrieveQueryError = AxiosError<unknown>

export const useProgramRetrieve = <TData = Awaited<ReturnType<typeof programRetrieve>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof programRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProgramRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof programRetrieve>>> = ({ signal }) => programRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof programRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

