/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PaginatedLaunchSerializerCommonList,
  LaunchListParams,
  LaunchDetailed,
  LaunchPreviousListParams,
  LaunchUpcomingListParams
} from '../../model'


/**
 * API endpoint that returns all Launch objects or a single launch.

EXAMPLE - /launch/\<id\>/ or /launch/?mode=list&search=SpaceX

GET
Return a list of all Launch objects.

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'

EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency, mission name & spacecraft name.

EXAMPLE - ?search=SpaceX
 */
export const launchList = (
    params?: LaunchListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedLaunchSerializerCommonList>> => {
    return axios.get(
      `/2.2.0/launch/`,{
        params,
    ...options}
    );
  }


export const getLaunchListQueryKey = (params?: LaunchListParams,) => [`/2.2.0/launch/`, ...(params ? [params]: [])];

    
export type LaunchListQueryResult = NonNullable<Awaited<ReturnType<typeof launchList>>>
export type LaunchListQueryError = AxiosError<unknown>

export const useLaunchList = <TData = Awaited<ReturnType<typeof launchList>>, TError = AxiosError<unknown>>(
 params?: LaunchListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchList>>> = ({ signal }) => launchList(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchList>>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns all Launch objects or a single launch.

EXAMPLE - /launch/\<id\>/ or /launch/?mode=list&search=SpaceX

GET
Return a list of all Launch objects.

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'

EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency, mission name & spacecraft name.

EXAMPLE - ?search=SpaceX
 */
export const launchRetrieve = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LaunchDetailed>> => {
    return axios.get(
      `/2.2.0/launch/${id}/`,options
    );
  }


export const getLaunchRetrieveQueryKey = (id: string,) => [`/2.2.0/launch/${id}/`];

    
export type LaunchRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof launchRetrieve>>>
export type LaunchRetrieveQueryError = AxiosError<unknown>

export const useLaunchRetrieve = <TData = Awaited<ReturnType<typeof launchRetrieve>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchRetrieve>>> = ({ signal }) => launchRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns previous Launch objects.

GET
Return a list of previous Launches

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'
EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency and mission name.
EXAMPLE - ?search=SpaceX
 */
export const launchPreviousList = (
    params?: LaunchPreviousListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedLaunchSerializerCommonList>> => {
    return axios.get(
      `/2.2.0/launch/previous/`,{
        params,
    ...options}
    );
  }


export const getLaunchPreviousListQueryKey = (params?: LaunchPreviousListParams,) => [`/2.2.0/launch/previous/`, ...(params ? [params]: [])];

    
export type LaunchPreviousListQueryResult = NonNullable<Awaited<ReturnType<typeof launchPreviousList>>>
export type LaunchPreviousListQueryError = AxiosError<unknown>

export const useLaunchPreviousList = <TData = Awaited<ReturnType<typeof launchPreviousList>>, TError = AxiosError<unknown>>(
 params?: LaunchPreviousListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchPreviousList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchPreviousListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchPreviousList>>> = ({ signal }) => launchPreviousList(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchPreviousList>>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns previous Launch objects.

GET
Return a list of previous Launches

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'
EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency and mission name.
EXAMPLE - ?search=SpaceX
 */
export const launchPreviousRetrieve = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LaunchDetailed>> => {
    return axios.get(
      `/2.2.0/launch/previous/${id}/`,options
    );
  }


export const getLaunchPreviousRetrieveQueryKey = (id: string,) => [`/2.2.0/launch/previous/${id}/`];

    
export type LaunchPreviousRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof launchPreviousRetrieve>>>
export type LaunchPreviousRetrieveQueryError = AxiosError<unknown>

export const useLaunchPreviousRetrieve = <TData = Awaited<ReturnType<typeof launchPreviousRetrieve>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchPreviousRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchPreviousRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchPreviousRetrieve>>> = ({ signal }) => launchPreviousRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchPreviousRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns future Launch objects and launches from the last twenty four hours.

GET
Return a list of future Launches

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'

EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency and mission name.
EXAMPLE - ?search=SpaceX
 */
export const launchUpcomingList = (
    params?: LaunchUpcomingListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginatedLaunchSerializerCommonList>> => {
    return axios.get(
      `/2.2.0/launch/upcoming/`,{
        params,
    ...options}
    );
  }


export const getLaunchUpcomingListQueryKey = (params?: LaunchUpcomingListParams,) => [`/2.2.0/launch/upcoming/`, ...(params ? [params]: [])];

    
export type LaunchUpcomingListQueryResult = NonNullable<Awaited<ReturnType<typeof launchUpcomingList>>>
export type LaunchUpcomingListQueryError = AxiosError<unknown>

export const useLaunchUpcomingList = <TData = Awaited<ReturnType<typeof launchUpcomingList>>, TError = AxiosError<unknown>>(
 params?: LaunchUpcomingListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchUpcomingList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchUpcomingListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchUpcomingList>>> = ({ signal }) => launchUpcomingList(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchUpcomingList>>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * API endpoint that returns future Launch objects and launches from the last twenty four hours.

GET
Return a list of future Launches

FILTERS
Fields - 'name', 'id(s)', 'lsp__id', 'lsp__name', 'serial_number', 'launcher_config__id',
 'rocket__spacecraftflight__spacecraft__name', 'is_crewed', 'include_suborbital', 'spacecraft_config__ids',
 'related', 'location__ids', 'lsp__ids'

MODE
'normal', 'list', 'detailed'

EXAMPLE ?mode=list

SEARCH
Searches through the launch name, rocket name, launch agency and mission name.
EXAMPLE - ?search=SpaceX
 */
export const launchUpcomingRetrieve = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LaunchDetailed>> => {
    return axios.get(
      `/2.2.0/launch/upcoming/${id}/`,options
    );
  }


export const getLaunchUpcomingRetrieveQueryKey = (id: string,) => [`/2.2.0/launch/upcoming/${id}/`];

    
export type LaunchUpcomingRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof launchUpcomingRetrieve>>>
export type LaunchUpcomingRetrieveQueryError = AxiosError<unknown>

export const useLaunchUpcomingRetrieve = <TData = Awaited<ReturnType<typeof launchUpcomingRetrieve>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof launchUpcomingRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLaunchUpcomingRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof launchUpcomingRetrieve>>> = ({ signal }) => launchUpcomingRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof launchUpcomingRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

