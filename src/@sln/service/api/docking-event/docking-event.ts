/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  PaginatedDockingEventList,
  DockingEventListParams,
  DockingEventDetailed,
} from "../../model";

/**
 * API endpoint that allows Docking Events to be viewed.

GET:
Return a list of all the docking events.

FILTERS:
Fields - 'space_station__id', 'flight_vehicle__id', 'docking_location__id'


MODE:
'detailed'
EXAMPLE: ?mode=detailed

ORDERING:
Fields - 'id', 'docking', 'departure'
Order reverse via Docking date.
Example - /2.2.0/docking_event/?ordering=-docking
 */
export const dockingEventList = (
  params?: DockingEventListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedDockingEventList>> => {
  return axios.get(`/2.2.0/docking_event/`, {
    params,
    ...options,
  });
};

export const getDockingEventListQueryKey = (
  params?: DockingEventListParams
) => [`/2.2.0/docking_event/`, ...(params ? [params] : [])];

export type DockingEventListQueryResult = NonNullable<
  Awaited<ReturnType<typeof dockingEventList>>
>;
export type DockingEventListQueryError = AxiosError<unknown>;

export const useDockingEventList = <
  TData = Awaited<ReturnType<typeof dockingEventList>>,
  TError = AxiosError<unknown>
>(
  params?: DockingEventListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dockingEventList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDockingEventListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dockingEventList>>> =
    ({ signal }) => dockingEventList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof dockingEventList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Docking Events to be viewed.

GET:
Return a list of all the docking events.

FILTERS:
Fields - 'space_station__id', 'flight_vehicle__id', 'docking_location__id'


MODE:
'detailed'
EXAMPLE: ?mode=detailed

ORDERING:
Fields - 'id', 'docking', 'departure'
Order reverse via Docking date.
Example - /2.2.0/docking_event/?ordering=-docking
 */
export const dockingEventRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DockingEventDetailed>> => {
  return axios.get(`/2.2.0/docking_event/${id}/`, options);
};

export const getDockingEventRetrieveQueryKey = (id: number) => [
  `/2.2.0/docking_event/${id}/`,
];

export type DockingEventRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof dockingEventRetrieve>>
>;
export type DockingEventRetrieveQueryError = AxiosError<unknown>;

export const useDockingEventRetrieve = <
  TData = Awaited<ReturnType<typeof dockingEventRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dockingEventRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDockingEventRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dockingEventRetrieve>>
  > = ({ signal }) => dockingEventRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof dockingEventRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
