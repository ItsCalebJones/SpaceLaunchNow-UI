/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. 

While this API is free to use it is subject to rate limiting for non-authenticated requests.

Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.

If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 * OpenAPI spec version: v2.2.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  PaginatedLocationList,
  LocationListParams,
  LocationDetail,
} from "../../model";

/**
 * API endpoint that allows Location instances to be viewed.

GET:
Return a list of all the existing location instances.

FILTERS:
Parameters - 'name', 'country_code', 'id'
Example - /2.2.0/location/?country_code=USA
 */
export const locationList = (
  params?: LocationListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedLocationList>> => {
  return axios.get(`/2.2.0/location/`, {
    params,
    ...options,
  });
};

export const getLocationListQueryKey = (params?: LocationListParams) => [
  `/2.2.0/location/`,
  ...(params ? [params] : []),
];

export type LocationListQueryResult = NonNullable<
  Awaited<ReturnType<typeof locationList>>
>;
export type LocationListQueryError = AxiosError<unknown>;

export const useLocationList = <
  TData = Awaited<ReturnType<typeof locationList>>,
  TError = AxiosError<unknown>
>(
  params?: LocationListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof locationList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLocationListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof locationList>>> = ({
    signal,
  }) => locationList(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof locationList>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * API endpoint that allows Location instances to be viewed.

GET:
Return a list of all the existing location instances.

FILTERS:
Parameters - 'name', 'country_code', 'id'
Example - /2.2.0/location/?country_code=USA
 */
export const locationRetrieve = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LocationDetail>> => {
  return axios.get(`/2.2.0/location/${id}/`, options);
};

export const getLocationRetrieveQueryKey = (id: number) => [
  `/2.2.0/location/${id}/`,
];

export type LocationRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof locationRetrieve>>
>;
export type LocationRetrieveQueryError = AxiosError<unknown>;

export const useLocationRetrieve = <
  TData = Awaited<ReturnType<typeof locationRetrieve>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof locationRetrieve>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLocationRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof locationRetrieve>>> =
    ({ signal }) => locationRetrieve(id, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof locationRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
