/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Events,
    EventsFromJSON,
    EventsToJSON,
    PaginatedEventsList,
    PaginatedEventsListFromJSON,
    PaginatedEventsListToJSON,
} from '../models';

export interface EventListRequest {
    id?: number;
    limit?: number;
    offset?: number;
    program?: Array<number>;
    search?: string;
    slug?: string;
    type?: number;
}

export interface EventPreviousListRequest {
    limit?: number;
    offset?: number;
    program?: Array<number>;
    search?: string;
    type?: number;
}

export interface EventPreviousRetrieveRequest {
    id: number;
}

export interface EventRetrieveRequest {
    id: number;
}

export interface EventUpcomingListRequest {
    limit?: number;
    offset?: number;
    program?: Array<number>;
    search?: string;
    type?: number;
}

export interface EventUpcomingRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows all Events to be viewed.  GET: Return a list of all Events  SEARCH EXAMPLE: /2.2.0/event/?search=Dragon Searches through name
     */
    async eventListRaw(requestParameters: EventListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedEventsList>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.program) {
            queryParameters['program'] = requestParameters.program;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventsListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows all Events to be viewed.  GET: Return a list of all Events  SEARCH EXAMPLE: /2.2.0/event/?search=Dragon Searches through name
     */
    async eventList(requestParameters: EventListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedEventsList> {
        const response = await this.eventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows past Events to be viewed.  GET: Return a list of past Events
     */
    async eventPreviousListRaw(requestParameters: EventPreviousListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedEventsList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.program) {
            queryParameters['program'] = requestParameters.program;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/previous/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventsListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows past Events to be viewed.  GET: Return a list of past Events
     */
    async eventPreviousList(requestParameters: EventPreviousListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedEventsList> {
        const response = await this.eventPreviousListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows past Events to be viewed.  GET: Return a list of past Events
     */
    async eventPreviousRetrieveRaw(requestParameters: EventPreviousRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Events>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventPreviousRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/previous/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows past Events to be viewed.  GET: Return a list of past Events
     */
    async eventPreviousRetrieve(requestParameters: EventPreviousRetrieveRequest, initOverrides?: RequestInit): Promise<Events> {
        const response = await this.eventPreviousRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows all Events to be viewed.  GET: Return a list of all Events  SEARCH EXAMPLE: /2.2.0/event/?search=Dragon Searches through name
     */
    async eventRetrieveRaw(requestParameters: EventRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Events>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows all Events to be viewed.  GET: Return a list of all Events  SEARCH EXAMPLE: /2.2.0/event/?search=Dragon Searches through name
     */
    async eventRetrieve(requestParameters: EventRetrieveRequest, initOverrides?: RequestInit): Promise<Events> {
        const response = await this.eventRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows future Events to be viewed.  GET: Return a list of future Events
     */
    async eventUpcomingListRaw(requestParameters: EventUpcomingListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedEventsList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.program) {
            queryParameters['program'] = requestParameters.program;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/upcoming/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventsListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows future Events to be viewed.  GET: Return a list of future Events
     */
    async eventUpcomingList(requestParameters: EventUpcomingListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedEventsList> {
        const response = await this.eventUpcomingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows future Events to be viewed.  GET: Return a list of future Events
     */
    async eventUpcomingRetrieveRaw(requestParameters: EventUpcomingRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Events>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventUpcomingRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/event/upcoming/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows future Events to be viewed.  GET: Return a list of future Events
     */
    async eventUpcomingRetrieve(requestParameters: EventUpcomingRetrieveRequest, initOverrides?: RequestInit): Promise<Events> {
        const response = await this.eventUpcomingRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
