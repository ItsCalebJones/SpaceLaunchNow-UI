/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DockingEventDetailed,
    DockingEventDetailedFromJSON,
    DockingEventDetailedToJSON,
    PaginatedDockingEventList,
    PaginatedDockingEventListFromJSON,
    PaginatedDockingEventListToJSON,
} from '../models';

export interface DockingEventListRequest {
    dockingGt?: Date;
    dockingGte?: Date;
    dockingLt?: Date;
    dockingLte?: Date;
    dockingLocationId?: number;
    flightVehicleId?: number;
    limit?: number;
    offset?: number;
    ordering?: string;
    search?: string;
    spaceStationId?: number;
}

export interface DockingEventRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class DockingEventApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Docking Events to be viewed.  GET: Return a list of all the docking events.  FILTERS: Fields - \'space_station__id\', \'flight_vehicle__id\', \'docking_location__id\'   MODE: \'detailed\' EXAMPLE: ?mode=detailed  ORDERING: Fields - \'id\', \'docking\', \'departure\' Order reverse via Docking date. Example - /2.2.0/docking_event/?ordering=-docking
     */
    async dockingEventListRaw(requestParameters: DockingEventListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedDockingEventList>> {
        const queryParameters: any = {};

        if (requestParameters.dockingGt !== undefined) {
            queryParameters['docking__gt'] = (requestParameters.dockingGt as any).toISOString();
        }

        if (requestParameters.dockingGte !== undefined) {
            queryParameters['docking__gte'] = (requestParameters.dockingGte as any).toISOString();
        }

        if (requestParameters.dockingLt !== undefined) {
            queryParameters['docking__lt'] = (requestParameters.dockingLt as any).toISOString();
        }

        if (requestParameters.dockingLte !== undefined) {
            queryParameters['docking__lte'] = (requestParameters.dockingLte as any).toISOString();
        }

        if (requestParameters.dockingLocationId !== undefined) {
            queryParameters['docking_location__id'] = requestParameters.dockingLocationId;
        }

        if (requestParameters.flightVehicleId !== undefined) {
            queryParameters['flight_vehicle__id'] = requestParameters.flightVehicleId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.spaceStationId !== undefined) {
            queryParameters['space_station__id'] = requestParameters.spaceStationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/docking_event/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDockingEventListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Docking Events to be viewed.  GET: Return a list of all the docking events.  FILTERS: Fields - \'space_station__id\', \'flight_vehicle__id\', \'docking_location__id\'   MODE: \'detailed\' EXAMPLE: ?mode=detailed  ORDERING: Fields - \'id\', \'docking\', \'departure\' Order reverse via Docking date. Example - /2.2.0/docking_event/?ordering=-docking
     */
    async dockingEventList(requestParameters: DockingEventListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedDockingEventList> {
        const response = await this.dockingEventListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Docking Events to be viewed.  GET: Return a list of all the docking events.  FILTERS: Fields - \'space_station__id\', \'flight_vehicle__id\', \'docking_location__id\'   MODE: \'detailed\' EXAMPLE: ?mode=detailed  ORDERING: Fields - \'id\', \'docking\', \'departure\' Order reverse via Docking date. Example - /2.2.0/docking_event/?ordering=-docking
     */
    async dockingEventRetrieveRaw(requestParameters: DockingEventRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DockingEventDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling dockingEventRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/docking_event/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DockingEventDetailedFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Docking Events to be viewed.  GET: Return a list of all the docking events.  FILTERS: Fields - \'space_station__id\', \'flight_vehicle__id\', \'docking_location__id\'   MODE: \'detailed\' EXAMPLE: ?mode=detailed  ORDERING: Fields - \'id\', \'docking\', \'departure\' Order reverse via Docking date. Example - /2.2.0/docking_event/?ordering=-docking
     */
    async dockingEventRetrieve(requestParameters: DockingEventRetrieveRequest, initOverrides?: RequestInit): Promise<DockingEventDetailed> {
        const response = await this.dockingEventRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
