/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedSpaceStationList,
    PaginatedSpaceStationListFromJSON,
    PaginatedSpaceStationListToJSON,
    SpaceStationDetailed,
    SpaceStationDetailedFromJSON,
    SpaceStationDetailedToJSON,
} from '../models';

export interface SpacestationListRequest {
    limit?: number;
    name?: string;
    offset?: number;
    orbit?: number;
    ordering?: string;
    owners?: Array<number>;
    ownersAbbrev?: string;
    ownersName?: string;
    search?: string;
    status?: number;
    type?: number;
}

export interface SpacestationRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class SpacestationApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Space Stations to be viewed.  GET: Return a list of all the existing space stations.  FILTERS: Parameters - \'name\', \'status\', \'owners\', \'orbit\', \'type\', \'owners__name\', \'owners__abrev\' Example - /api/2.2.0/spacestation/?status=Active  SEARCH EXAMPLE: Example - /api/2.2.0/spacestation/?search=ISS Searches through \'name\', \'owners__name\', \'owners__abbrev\'  ORDERING: Fields - \'id\', \'name\', status\', \'type\', \'founded\', \'volume\' Example - /api/2.2.0/spacestation/?ordering=id
     */
    async spacestationListRaw(requestParameters: SpacestationListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedSpaceStationList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orbit !== undefined) {
            queryParameters['orbit'] = requestParameters.orbit;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.owners) {
            queryParameters['owners'] = requestParameters.owners;
        }

        if (requestParameters.ownersAbbrev !== undefined) {
            queryParameters['owners__abbrev'] = requestParameters.ownersAbbrev;
        }

        if (requestParameters.ownersName !== undefined) {
            queryParameters['owners__name'] = requestParameters.ownersName;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacestation/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSpaceStationListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Space Stations to be viewed.  GET: Return a list of all the existing space stations.  FILTERS: Parameters - \'name\', \'status\', \'owners\', \'orbit\', \'type\', \'owners__name\', \'owners__abrev\' Example - /api/2.2.0/spacestation/?status=Active  SEARCH EXAMPLE: Example - /api/2.2.0/spacestation/?search=ISS Searches through \'name\', \'owners__name\', \'owners__abbrev\'  ORDERING: Fields - \'id\', \'name\', status\', \'type\', \'founded\', \'volume\' Example - /api/2.2.0/spacestation/?ordering=id
     */
    async spacestationList(requestParameters: SpacestationListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedSpaceStationList> {
        const response = await this.spacestationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Space Stations to be viewed.  GET: Return a list of all the existing space stations.  FILTERS: Parameters - \'name\', \'status\', \'owners\', \'orbit\', \'type\', \'owners__name\', \'owners__abrev\' Example - /api/2.2.0/spacestation/?status=Active  SEARCH EXAMPLE: Example - /api/2.2.0/spacestation/?search=ISS Searches through \'name\', \'owners__name\', \'owners__abbrev\'  ORDERING: Fields - \'id\', \'name\', status\', \'type\', \'founded\', \'volume\' Example - /api/2.2.0/spacestation/?ordering=id
     */
    async spacestationRetrieveRaw(requestParameters: SpacestationRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpaceStationDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spacestationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/spacestation/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceStationDetailedFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Space Stations to be viewed.  GET: Return a list of all the existing space stations.  FILTERS: Parameters - \'name\', \'status\', \'owners\', \'orbit\', \'type\', \'owners__name\', \'owners__abrev\' Example - /api/2.2.0/spacestation/?status=Active  SEARCH EXAMPLE: Example - /api/2.2.0/spacestation/?search=ISS Searches through \'name\', \'owners__name\', \'owners__abbrev\'  ORDERING: Fields - \'id\', \'name\', status\', \'type\', \'founded\', \'volume\' Example - /api/2.2.0/spacestation/?ordering=id
     */
    async spacestationRetrieve(requestParameters: SpacestationRetrieveRequest, initOverrides?: RequestInit): Promise<SpaceStationDetailed> {
        const response = await this.spacestationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
