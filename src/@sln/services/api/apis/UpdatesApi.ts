/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedUpdateList,
    PaginatedUpdateListFromJSON,
    PaginatedUpdateListToJSON,
    Update,
    UpdateFromJSON,
    UpdateToJSON,
} from '../models';

export interface UpdatesListRequest {
    createdOn?: Date;
    launch?: string;
    launchLaunchServiceProvider?: number;
    limit?: number;
    offset?: number;
    ordering?: string;
    program?: number;
    search?: string;
}

export interface UpdatesRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class UpdatesApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows Updates to be viewed.  GET: Return a list of all the existing Updates.  FILTERS: Parameters - \'created_on\', \'launch__id\', \'program__id\', \'launch__launch_service_provider__id\', Example - /api/2.2.0/updates/?status=Active   ORDERING: Fields - \'created_on\', Example - /api/2.2.0/updates/?ordering=-created_on
     */
    async updatesListRaw(requestParameters: UpdatesListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedUpdateList>> {
        const queryParameters: any = {};

        if (requestParameters.createdOn !== undefined) {
            queryParameters['created_on'] = (requestParameters.createdOn as any).toISOString();
        }

        if (requestParameters.launch !== undefined) {
            queryParameters['launch'] = requestParameters.launch;
        }

        if (requestParameters.launchLaunchServiceProvider !== undefined) {
            queryParameters['launch__launch_service_provider'] = requestParameters.launchLaunchServiceProvider;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.program !== undefined) {
            queryParameters['program'] = requestParameters.program;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/updates/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUpdateListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Updates to be viewed.  GET: Return a list of all the existing Updates.  FILTERS: Parameters - \'created_on\', \'launch__id\', \'program__id\', \'launch__launch_service_provider__id\', Example - /api/2.2.0/updates/?status=Active   ORDERING: Fields - \'created_on\', Example - /api/2.2.0/updates/?ordering=-created_on
     */
    async updatesList(requestParameters: UpdatesListRequest = {}, initOverrides?: RequestInit): Promise<PaginatedUpdateList> {
        const response = await this.updatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows Updates to be viewed.  GET: Return a list of all the existing Updates.  FILTERS: Parameters - \'created_on\', \'launch__id\', \'program__id\', \'launch__launch_service_provider__id\', Example - /api/2.2.0/updates/?status=Active   ORDERING: Fields - \'created_on\', Example - /api/2.2.0/updates/?ordering=-created_on
     */
    async updatesRetrieveRaw(requestParameters: UpdatesRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Update>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/2.2.0/updates/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows Updates to be viewed.  GET: Return a list of all the existing Updates.  FILTERS: Parameters - \'created_on\', \'launch__id\', \'program__id\', \'launch__launch_service_provider__id\', Example - /api/2.2.0/updates/?status=Active   ORDERING: Fields - \'created_on\', Example - /api/2.2.0/updates/?ordering=-created_on
     */
    async updatesRetrieve(requestParameters: UpdatesRetrieveRequest, initOverrides?: RequestInit): Promise<Update> {
        const response = await this.updatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
