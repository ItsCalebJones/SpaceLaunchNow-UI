/* tslint:disable */
/* eslint-disable */
/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - the development endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventType,
    EventTypeFromJSON,
    EventTypeFromJSONTyped,
    EventTypeToJSON,
} from './EventType';
import {
    Expedition,
    ExpeditionFromJSON,
    ExpeditionFromJSONTyped,
    ExpeditionToJSON,
} from './Expedition';
import {
    LaunchSerializerCommon,
    LaunchSerializerCommonFromJSON,
    LaunchSerializerCommonFromJSONTyped,
    LaunchSerializerCommonToJSON,
} from './LaunchSerializerCommon';
import {
    Program,
    ProgramFromJSON,
    ProgramFromJSONTyped,
    ProgramToJSON,
} from './Program';
import {
    SpaceStationSerializerForCommon,
    SpaceStationSerializerForCommonFromJSON,
    SpaceStationSerializerForCommonFromJSONTyped,
    SpaceStationSerializerForCommonToJSON,
} from './SpaceStationSerializerForCommon';
import {
    Update,
    UpdateFromJSON,
    UpdateFromJSONTyped,
    UpdateToJSON,
} from './Update';

/**
 * 
 * @export
 * @interface Events
 */
export interface Events {
    /**
     * 
     * @type {number}
     * @memberof Events
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    readonly url: string;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    name: string;
    /**
     * 
     * @type {Array<Update>}
     * @memberof Events
     */
    readonly updates: Array<Update>;
    /**
     * 
     * @type {EventType}
     * @memberof Events
     */
    readonly type: EventType | null;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Events
     */
    webcastLive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    location?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    newsUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    videoUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Events
     */
    featureImage?: string;
    /**
     * 
     * @type {Date}
     * @memberof Events
     */
    date?: Date | null;
    /**
     * 
     * @type {Array<LaunchSerializerCommon>}
     * @memberof Events
     */
    launches: Array<LaunchSerializerCommon>;
    /**
     * 
     * @type {Array<Expedition>}
     * @memberof Events
     */
    expeditions: Array<Expedition>;
    /**
     * 
     * @type {Array<SpaceStationSerializerForCommon>}
     * @memberof Events
     */
    spacestations: Array<SpaceStationSerializerForCommon>;
    /**
     * 
     * @type {Array<Program>}
     * @memberof Events
     */
    readonly program: Array<Program>;
}

export function EventsFromJSON(json: any): Events {
    return EventsFromJSONTyped(json, false);
}

export function EventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Events {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'url': json['url'],
        'slug': json['slug'],
        'name': json['name'],
        'updates': ((json['updates'] as Array<any>).map(UpdateFromJSON)),
        'type': EventTypeFromJSON(json['type']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'webcastLive': !exists(json, 'webcast_live') ? undefined : json['webcast_live'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'newsUrl': !exists(json, 'news_url') ? undefined : json['news_url'],
        'videoUrl': !exists(json, 'video_url') ? undefined : json['video_url'],
        'featureImage': !exists(json, 'feature_image') ? undefined : json['feature_image'],
        'date': !exists(json, 'date') ? undefined : (json['date'] === null ? null : new Date(json['date'])),
        'launches': ((json['launches'] as Array<any>).map(LaunchSerializerCommonFromJSON)),
        'expeditions': ((json['expeditions'] as Array<any>).map(ExpeditionFromJSON)),
        'spacestations': ((json['spacestations'] as Array<any>).map(SpaceStationSerializerForCommonFromJSON)),
        'program': ((json['program'] as Array<any>).map(ProgramFromJSON)),
    };
}

export function EventsToJSON(value?: Events | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'slug': value.slug,
        'name': value.name,
        'description': value.description,
        'webcast_live': value.webcastLive,
        'location': value.location,
        'news_url': value.newsUrl,
        'video_url': value.videoUrl,
        'feature_image': value.featureImage,
        'date': value.date === undefined ? undefined : (value.date === null ? null : value.date.toISOString()),
        'launches': ((value.launches as Array<any>).map(LaunchSerializerCommonToJSON)),
        'expeditions': ((value.expeditions as Array<any>).map(ExpeditionToJSON)),
        'spacestations': ((value.spacestations as Array<any>).map(SpaceStationSerializerForCommonToJSON)),
    };
}

